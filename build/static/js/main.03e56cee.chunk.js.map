{"version":3,"sources":["components/Search.js","components/GameListItem.js","components/Games.js","components/Game.js","components/Pager.js","App.js","index.js"],"names":["Search","state","query","onSubmit","e","preventDefault","props","search","immaTyping","setState","target","name","value","this","className","type","placeholder","onChange","Component","GameListItem","to","game","id","src","image","small_url","alt","Games","games","map","key","Game","images","platforms","genres","publishers","devs","gameId","match","params","console","log","fetchJsonp","jsonpCallback","then","res","json","results","developers","catch","ex","plat","genre","devlist","dev","publist","pub","style","backgroundImage","original_url","deck","expected_release_year","Pager","spanArray","pages","totalRes","pageRes","Math","ceil","count","i","push","renderPager","getPages","page","onClick","App","error","pageString","limit","number_of_total_results","exact","path","render","Fragment","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.03e56cee.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: ''\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.search(this.state.query);\r\n  };\r\n\r\n  immaTyping = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} className='search-form'>\r\n        <input\r\n          type='text'\r\n          name='query'\r\n          placeholder='Search for a game title...'\r\n          value={this.state.query}\r\n          onChange={this.immaTyping}\r\n        />\r\n        <input type='submit' value='Search' className='search-btn' />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n// import noImage from '../no_image.jpg';\r\n\r\nclass GameListItem extends Component {\r\n  render() {\r\n    return (\r\n      <div className='game-list-item'>\r\n        <Link to={`/game/${this.props.game.id}`}>\r\n          <img\r\n            src={ this.props.game.image.small_url }\r\n            alt=''\r\n          />\r\n          <h3>{this.props.game.name}</h3>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// PropTypes\r\nGameListItem.propTypes = {\r\n  game: PropTypes.object.isRequired\r\n};\r\n\r\nexport default GameListItem;\r\n","import React, { Component } from 'react';\r\nimport GameListItem from './GameListItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Games extends Component {\r\n  render() {\r\n    return (\r\n      <div className='game-list'>\r\n        {this.props.games.map(game => (\r\n          <GameListItem key={game.id} game={game} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// PropTypes\r\nGames.propTypes = {\r\n  games: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Games;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport fetchJsonp from 'fetch-jsonp';\r\n// import noImage from '../no_image.jpg';\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    game: '',\r\n    images: '',\r\n    platforms: [],\r\n    genres: [],\r\n    publishers: [],\r\n    devs: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    const gameId = this.props.match.params.id;\r\n    console.log(gameId);\r\n\r\n    fetchJsonp(\r\n      'https://www.giantbomb.com/api/game/' +\r\n        gameId +\r\n        '/?api_key=ec164f3e4ebfe95b8f71fde3a5b2562480e35db4&format=jsonp',\r\n      { jsonpCallback: 'json_callback' }\r\n    )\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        console.log('parsed game', json);\r\n        this.setState({\r\n          game: json.results,\r\n          images: json.results.image,\r\n          platforms: json.results.platforms,\r\n          genres: json.results.genres,\r\n          publishers: json.results.publishers,\r\n          devs: json.results.developers\r\n        });\r\n      })\r\n      .catch(ex => console.log('parsing failed', ex));\r\n  }\r\n\r\n  render() {\r\n    const platforms = this.state.platforms\r\n      ? this.state.platforms.map(plat => <span key={plat.id}>{plat.name}</span>)\r\n      : 'N/A';\r\n    const genres = this.state.genres\r\n      ? this.state.genres.map(genre => <span key={genre.id}>{genre.name}</span>)\r\n      : 'N/A';\r\n    const devlist = this.state.devs\r\n      ? this.state.devs.map(dev => <span key={dev.id}>{dev.name}</span>)\r\n      : 'N/A';\r\n    const publist = this.state.publishers\r\n      ? this.state.publishers.map(pub => <span key={pub.id}>{pub.name}</span>)\r\n      : 'N/A';\r\n    return (\r\n      <div\r\n        className='game-details'\r\n        style={{ backgroundImage: `url(${this.state.images.original_url})` }}\r\n      >\r\n        <div className='game-details-inner'>\r\n          <img\r\n            src={this.state.images.small_url}\r\n            alt={this.state.game.name}\r\n          />\r\n          <div className='details-right'>\r\n            <Link to='/'>Go Back Home</Link>\r\n            <h1>{this.state.game.name}</h1>\r\n            <p>{this.state.game.deck || 'No description available'}</p>\r\n            <h5>Platforms:</h5>\r\n            {platforms}\r\n            <br></br>\r\n            <h5>Genres:</h5>\r\n            {genres}\r\n            <br></br>\r\n            <h5>Developers:</h5>\r\n            {devlist}\r\n            <br></br>\r\n            <h5>Publishers:</h5>\r\n            {publist}\r\n            <br></br>\r\n            <h5>Expected Release Year:</h5>\r\n            {this.state.game.expected_release_year || 'N/A'}\r\n            <br></br>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\r\n\r\nclass Pager extends Component {\r\n  getPages() {\r\n    let pages = this.props.totalRes / this.props.pageRes;\r\n    pages = Math.ceil(pages);\r\n    return pages;\r\n  }\r\n\r\n  spanArray = [];\r\n\r\n  renderPager(count) {\r\n    this.spanArray = [];\r\n    for (let i = 0; i < count; i++) {\r\n      this.spanArray.push('&page=' + (i + 1));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='pager' className='pager'>\r\n        {this.renderPager(this.getPages())}\r\n        {this.spanArray.map((page, i) => (\r\n          <span\r\n            onClick={() => {\r\n              this.props.search(this.props.query, page);\r\n            }}\r\n            key={i}\r\n          >\r\n            {i + 1}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pager;\r\n","import React, { Component } from 'react';\r\nimport fetchJsonp from 'fetch-jsonp';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nimport './App.css';\r\nimport Search from './components/Search';\r\nimport Games from './components/Games';\r\nimport Game from './components/Game';\r\nimport Pager from './components/Pager';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    games: [],\r\n    pageRes: 0,\r\n    totalRes: 0,\r\n    query: '',\r\n    error: ''\r\n  };\r\n\r\n  // Search:\r\n  search = (query, pageString) => {\r\n    this.setState({ query: query });\r\n    fetchJsonp(\r\n      'https://www.giantbomb.com/api/search/?api_key=ec164f3e4ebfe95b8f71fde3a5b2562480e35db4&query=' +\r\n        query +\r\n        '&resources=game&format=jsonp&limit=12' +\r\n        pageString,\r\n      { jsonpCallback: 'json_callback' }\r\n    )\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        console.log('parsed json', json);\r\n        this.setState({\r\n          games: json.results,\r\n          pageRes: json.limit,\r\n          totalRes: json.number_of_total_results\r\n        });\r\n      })\r\n      .catch(ex => {\r\n        console.log('parsing failed', ex);\r\n        this.setState({\r\n          error:\r\n            'Request error occured. The request limit may have been reached. Try again in 15 minutes or more.'\r\n        });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className='App'>\r\n          <Route\r\n            exact\r\n            path='/'\r\n            render={props => (\r\n              <React.Fragment>\r\n                <div className='app-name'>\r\n                  <h1>Game Search App</h1>\r\n                  <small>0.1.0</small>\r\n                </div>\r\n                <div className='links'>\r\n                  {/* <Link to=\"/about\">About</Link> */}\r\n                </div>\r\n                <Search search={this.search} />\r\n                <Games games={this.state.games} />\r\n                <Pager\r\n                  pageRes={this.state.pageRes}\r\n                  totalRes={this.state.totalRes}\r\n                  query={this.state.query}\r\n                  search={this.search}\r\n                />\r\n                {this.state.error ? <span>{this.state.error}</span> : null}\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n          <Route path='/game/:id' component={Game} />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}